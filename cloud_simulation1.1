import math
import numpy as np
import random
import pandas as pd
import matplotlib.pyplot as plt
from matplotlib.animation import FuncAnimation
from scipy.interpolate import CubicSpline
from matplotlib.patches import Circle, Ellipse

TOTAL_FRAMES = 288
INTERVAL_MS = 50
FRAMES_PER_HOUR = 12
AREA_SIZE_KM = 10.0
MAX_CLOUDS = 1
COVERAGE_THRESHOLD = 0.05

SEASON = "SUMMER"

CLOUD_PATTERNS = {
    "SCATTERED": {
        "probability": 0.5,
        "count_range": (3, 8),
        "grouping_factor": 0.2,
        "duration": (30, 90)
    },
    "BUNCHED": {
        "probability": 0.3,
        "count_range": (10, 20),
        "grouping_factor": 0.8,
        "duration": (15, 45)
    },
    "ISOLATED": {
        "probability": 0.2,
        "count_range": (1, 3),
        "grouping_factor": 0.1,
        "duration": (20, 60)
    }
}

CLOUD_SIZES = {
    "TINY": {
        "width_range": (200, 350),
        "height_range": (150, 250),
        "probability": 0.2,
        "scale_factor": 0.4
    },
    "SMALL": {
        "width_range": (400, 800),
        "height_range": (250, 500),
        "probability": 0.4,
        "scale_factor": 0.5
    },
    "MEDIUM": {
        "width_range": (900, 1300),
        "height_range": (500, 750),
        "probability": 0.3,
        "scale_factor": 0.6
    },
    "LARGE": {
        "width_range": (1400, 2000),
        "height_range": (800, 1200),
        "probability": 0.1,
        "scale_factor": 0.7
    }
}

CLOUD_WIDTH_MIN = 400
CLOUD_WIDTH_MAX = 800
CLOUD_HEIGHT_MIN = 250
CLOUD_HEIGHT_MAX = 1000
CLOUD_SCALE_FACTOR = 0.5
CLOUD_OPACITY_RAMP = 0.15
CLOUD_SPEED_SCALE = 0.4

class Cloud:
    def __init__(self, birth_frame, size_factor=1.0, position=None, cloud_size=None):
        if cloud_size is None:
            r = random.random()
            cum_prob = 0
            for size, params in CLOUD_SIZES.items():
                cum_prob += params["probability"]
                if r <= cum_prob:
                    cloud_size = size
                    break
            if cloud_size is None:
                cloud_size = "SMALL"
        
        size_params = CLOUD_SIZES[cloud_size]
        self.cloud_size = cloud_size
        
        width_min = int(size_params["width_range"][0] * size_factor)
        width_max = int(size_params["width_range"][1] * size_factor)
        height_min = int(size_params["height_range"][0] * size_factor)
        height_max = int(size_params["height_range"][1] * size_factor)
        
        self.scale_factor = size_params["scale_factor"]
        
        self.width = int(np.random.uniform(width_min, width_max))
        self.height = int(np.random.uniform(height_min, height_max))
        
        self.domain_size = 10000
        
        if position is None:
            self.x = np.random.uniform(-self.width, self.domain_size)
            self.y = np.random.uniform(-self.height, self.domain_size)
        else:
            variation = 500 * size_factor
            self.x = position[0] + np.random.uniform(-variation, variation)
            self.y = position[1] + np.random.uniform(-variation, variation)
        
        self.opacity = 0.0
        self.active = False
        self.birth_frame = birth_frame
        self.lifetime = 0
        
        self.puff_variation = np.random.uniform(0.8, 1.2, 8)
        self.rotation = np.random.uniform(0, 2*np.pi)
        self.color = (1.0, 1.0, 1.0)
        
        self.original_width = self.width
        self.original_height = self.height
        
    def update(self, dx, dy, frame_idx, wind_speed=0):
        self.x = (self.x + dx) % (self.domain_size + self.width*2)
        self.y = (self.y + dy) % (self.domain_size + self.height*2)
        
        self.lifetime = frame_idx - self.birth_frame
        screen_margin = 2000
        self.active = (
            -screen_margin < self.x < self.domain_size + screen_margin and 
            -screen_margin < self.y < self.domain_size + screen_margin
        )
        
        target_opacity = 0.7 if self.active else 0
        self.opacity += (target_opacity - self.opacity) * CLOUD_OPACITY_RAMP
        self.opacity = np.clip(self.opacity, 0, 0.7)
        
        if wind_speed > 3.0:
            stretch = 1.0 + (wind_speed / 10.0) * 0.3
            self.width = min(int(self.width * stretch), int(CLOUD_WIDTH_MAX * 1.5))
            
            if self.width > self.height * 2:
                self.height = int(self.width / 2)
        else:
            if abs(self.width - self.original_width) > 2:
                self.width = int(self.width * 0.95 + self.original_width * 0.05)
            if abs(self.height - self.original_height) > 2:
                self.height = int(self.height * 0.95 + self.original_height * 0.05)

class WeatherSystem:
    def __init__(self):
        self.cc_hourly = self.generate_synthetic_cloud_cover(24)
        self.wspd_hourly = self.generate_synthetic_wind_speed(24)
        self.wdir_hourly = self.generate_synthetic_wind_direction(24)
        
        self.cc_5min = self.upsample_to_5min(self.cc_hourly)
        self.wspd_5min = self.upsample_to_5min(self.wspd_hourly)
        self.wdir_5min = self.upsample_to_5min(self.wdir_hourly)
        
        self.apply_seasonal_adjustments()
        
        self.clouds = []
        
        self.current_pattern = "SCATTERED"
        self.pattern_change_frame = 0
        self.next_pattern_change = random.randint(*CLOUD_PATTERNS["SCATTERED"]["duration"])
        self.target_cloud_count = random.randint(*CLOUD_PATTERNS["SCATTERED"]["count_range"])
        
        self.atmospheric_stability = 0.5
        self.is_precipitating = False
        
    def apply_seasonal_adjustments(self):
        if SEASON == "WINTER":
            self.wspd_5min = np.clip(self.wspd_5min * 1.2, 0, 15)
            self.cc_5min = np.clip(self.cc_5min * 0.7, 0, 100)
        elif SEASON == "SUMMER":
            variation = np.sin(np.linspace(0, 10*np.pi, len(self.cc_5min))) * 15
            self.cc_5min = np.clip(self.cc_5min + variation, 0, 100)
        elif SEASON == "SPRING":
            variation = np.sin(np.linspace(0, 15*np.pi, len(self.cc_5min))) * 20
            self.cc_5min = np.clip(self.cc_5min + variation, 0, 100)
            
    def generate_synthetic_cloud_cover(self, hours):
        base = 40 + 20 * np.sin(np.linspace(0, 2*np.pi, hours))
        noise = np.random.normal(0, 10, hours)
        cc = np.clip(base + noise, 0, 100)
        return cc
        
    def generate_synthetic_wind_speed(self, hours):
        base = 3 + 2 * np.sin(np.linspace(0, 2*np.pi, hours))
        noise = np.random.normal(0, 0.5, hours)
        speed = np.clip(base + noise, 0.5, 10)
        return speed
        
    def generate_synthetic_wind_direction(self, hours):
        base = 270 + 45 * np.sin(np.linspace(0, np.pi, hours))
        noise = np.random.normal(0, 15, hours)
        direction = (base + noise) % 360
        return direction
    
    def upsample_to_5min(self, arr_hourly):
        x_hourly = np.arange(len(arr_hourly))
        x_5min = np.linspace(0, len(arr_hourly)-1, len(arr_hourly)*12)
        return np.interp(x_5min, x_hourly, arr_hourly)
    
    def update_atmospheric_conditions(self, frame_idx):
        hour = (frame_idx // FRAMES_PER_HOUR) % 24
        
        if 9 <= hour < 15:
            target_stability = 0.3
        elif 19 <= hour or hour < 5:
            target_stability = 0.7
        else:
            target_stability = 0.5
            
        if self.atmospheric_stability < target_stability:
            self.atmospheric_stability = min(self.atmospheric_stability + 0.01, target_stability)
        else:
            self.atmospheric_stability = max(self.atmospheric_stability - 0.01, target_stability)
    
    def select_new_pattern(self):
        if self.current_pattern == "SCATTERED":
            pattern_probs = {"SCATTERED": 0.6, "BUNCHED": 0.3, "ISOLATED": 0.1}
        elif self.current_pattern == "BUNCHED":
            pattern_probs = {"SCATTERED": 0.4, "BUNCHED": 0.5, "ISOLATED": 0.1}
        else:
            pattern_probs = {"SCATTERED": 0.3, "BUNCHED": 0.1, "ISOLATED": 0.6}
        
        r = random.random()
        cum_prob = 0
        for pattern, prob in pattern_probs.items():
            cum_prob += prob
            if r <= cum_prob:
                self.current_pattern = pattern
                break
        
        pattern_params = CLOUD_PATTERNS[self.current_pattern]
        self.target_cloud_count = random.randint(*pattern_params["count_range"])
        
        if self.atmospheric_stability < 0.4:
            self.next_pattern_change = random.randint(
                max(pattern_params["duration"][0] - 10, 15),
                max(pattern_params["duration"][1] - 15, 30)
            )
        else:
            self.next_pattern_change = random.randint(
                pattern_params["duration"][0],
                pattern_params["duration"][1]
            )
    
    def apply_time_of_day_effects(self, frame_idx):
        hour = (frame_idx // FRAMES_PER_HOUR) % 24
        
        for cloud in self.clouds:
            if not cloud.active:
                continue
                
            if 7 <= hour < 11 and random.random() < 0.01:
                cloud.opacity *= 0.8
                
            elif 13 <= hour < 17 and random.random() < 0.02:
                cloud.width = min(int(cloud.width * 1.1), CLOUD_WIDTH_MAX * 1.5)
                cloud.height = min(int(cloud.height * 1.1), CLOUD_HEIGHT_MAX * 1.5)
    
    def handle_cloud_merging(self):
        if len(self.clouds) <= 1:
            return
            
        merged_indices = []
        
        for i, cloud1 in enumerate(self.clouds):
            if i in merged_indices:
                continue
                
            for j, cloud2 in enumerate(self.clouds[i+1:], i+1):
                if j in merged_indices or not cloud1.active or not cloud2.active:
                    continue
                    
                c1_x, c1_y = cloud1.x + cloud1.width/2, cloud1.y + cloud1.height/2
                c2_x, c2_y = cloud2.x + cloud2.width/2, cloud2.y + cloud2.height/2
                distance = math.hypot(c1_x - c2_x, c1_y - c2_y)
                
                threshold = (cloud1.width + cloud2.width) / 3
                
                if distance < threshold and random.random() < 0.3:
                    cloud1.width = min(int(cloud1.width * 1.3), CLOUD_WIDTH_MAX * 2)
                    cloud1.height = min(int(cloud1.height * 1.2), CLOUD_HEIGHT_MAX * 2)
                    
                    cloud1.original_width = cloud1.width
                    cloud1.original_height = cloud1.height
                    
                    merged_indices.append(j)
        
        self.clouds = [c for i, c in enumerate(self.clouds) if i not in merged_indices]
    
    def create_clouds(self, frame_idx):
        if frame_idx - self.pattern_change_frame >= self.next_pattern_change:
            self.pattern_change_frame = frame_idx
            self.select_new_pattern()
            print(f"Frame {frame_idx}: Changing to {self.current_pattern} pattern, target {self.target_cloud_count} clouds")
        
        current_count = len(self.clouds)
        
        if current_count < self.target_cloud_count and current_count < MAX_CLOUDS:
            pattern_params = CLOUD_PATTERNS[self.current_pattern]
            grouping_factor = pattern_params["grouping_factor"]
            
            if random.random() < grouping_factor and current_count > 0:
                parent_cloud = random.choice(self.clouds)
                position = (parent_cloud.x, parent_cloud.y)
                size_factor = 0.8 + random.random() * 0.4
                
                self.clouds.append(Cloud(frame_idx, size_factor, position))
            else:
                size_factor = 0.7 + random.random() * 0.6
                self.clouds.append(Cloud(frame_idx, size_factor))
    
    def update_clouds(self, frame_idx):
        self.update_atmospheric_conditions(frame_idx)
        
        self.create_clouds(frame_idx)
        
        self.apply_time_of_day_effects(frame_idx)
        
        self.handle_cloud_merging()
            
        self.clouds = [c for c in self.clouds if c.lifetime < 3600]
        
        while len(self.clouds) > self.target_cloud_count:
            oldest_idx = 0
            oldest_lifetime = -1
            
            for i, cloud in enumerate(self.clouds):
                if cloud.lifetime > oldest_lifetime:
                    oldest_lifetime = cloud.lifetime
                    oldest_idx = i
            
            if oldest_idx < len(self.clouds):
                self.clouds.pop(oldest_idx)
        
        ws = self.wspd_5min[min(frame_idx, len(self.wspd_5min)-1)]
        wd = self.wdir_5min[min(frame_idx, len(self.wdir_5min)-1)]
        
        wd_rad = math.radians(wd)
        dist_km = ws * 0.06 * 5 * CLOUD_SPEED_SCALE
        px_per_km = 10000 / AREA_SIZE_KM
        dx = dist_km * math.cos(wd_rad) * px_per_km
        dy = -dist_km * math.sin(wd_rad) * px_per_km
        
        for cloud in self.clouds:
            cloud.update(dx, dy, frame_idx, ws)
    
    def get_current_weather(self, frame_idx):
        cc = self.cc_5min[min(frame_idx, len(self.cc_5min)-1)]
        ws = self.wspd_5min[min(frame_idx, len(self.wspd_5min)-1)]
        wd = self.wdir_5min[min(frame_idx, len(self.wdir_5min)-1)]
        
        return {
            'cc': cc,
            'ws': ws,
            'wd': wd,
            'pattern': self.current_pattern,
            'stability': self.atmospheric_stability
        }

def create_cloud_animation(panels_csv):
    panels_df = pd.read_csv(panels_csv)
    print(f"Loaded {len(panels_df)} panel coordinates from {panels_csv}")
    
    weather_system = WeatherSystem()
    
    fig, ax = plt.subplots(figsize=(14, 12))
    ax.set_facecolor('#f0f5e6')
    
    domain_size = (10000, 10000)
    grid_columns = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J']
    grid_rows = list(range(1, 11))
    
    for i in range(len(grid_columns) + 1):
        x = i * (domain_size[0] / len(grid_columns))
        ax.axvline(x, color='lightgray', linestyle='-', linewidth=0.5)
        
        if i < len(grid_columns):
            ax.text(x + (domain_size[0] / len(grid_columns) / 2), domain_size[1] * 1.01, 
                    grid_columns[i], ha='center', fontsize=12)
    
    for i in range(len(grid_rows) + 1):
        y = i * (domain_size[1] / len(grid_rows))
        ax.axhline(y, color='lightgray', linestyle='-', linewidth=0.5)
        
        if i < len(grid_rows):
            ax.text(-domain_size[0] * 0.01, y + (domain_size[1] / len(grid_rows) / 2), 
                    str(grid_rows[i]), va='center', fontsize=12)
    
    boundary_x = [0, 1000, 3000, 5000, 7000, 9000, 10000, 10000, 8000, 5000, 2000, 0, 0]
    boundary_y = [0, 0, 1000, 1000, 500, 1000, 2000, 8000, 10000, 9000, 8000, 6000, 0]
    boundary_line, = ax.plot(boundary_x, boundary_y, 'r--', linewidth=2, label='District Boundary')
    
    water_x = [0, 0, 1000, 2000, 2000, 1000, 0]
    water_y = [0, 6000, 8000, 8000, 3000, 1000, 0]
    water = ax.fill(water_x, water_y, color='lightblue', alpha=0.5)
    
    panels_scatter = ax.scatter(panels_df['x'], panels_df['y'], c='blue', s=30, alpha=0.8, label='Solar Panels')
    
    ax.set_xlim(-domain_size[0] * 0.02, domain_size[0] * 1.02)
    ax.set_ylim(-domain_size[1] * 0.02, domain_size[1] * 1.02)
    
    title = ax.set_title('Colombo District Grid System - Cloud Simulation', fontsize=16)
    ax.set_xlabel('X Coordinate (m)', fontsize=12)
    ax.set_ylabel('Y Coordinate (m)', fontsize=12)
    
    info_text = ax.text(domain_size[0] * 0.05, domain_size[1] * 0.05, 
             f"Total Solar Panels: {len(panels_df)}\nTime: 00:00\nCloud Cover: 0%", 
             fontsize=12, bbox=dict(facecolor='white', alpha=0.7))
    
    ax.legend(loc='lower right')
    
    cloud_artists = []
    
    def update(frame_idx):
        nonlocal cloud_artists
        
        weather_system.update_clouds(frame_idx)
        
        for artist in cloud_artists:
            artist.remove()
        cloud_artists = []
        
        for cloud in weather_system.clouds:
            if cloud.opacity > 0.05:
                # Draw cartoon-style clouds with multiple puffs
                cx, cy = cloud.x + cloud.width/2, cloud.y + cloud.height/2
                
                # Main ellipse (cloud body)
                main_ellipse = Ellipse(
                    (cx, cy),
                    cloud.width, 
                    cloud.height,
                    angle=np.degrees(cloud.rotation),
                    alpha=cloud.opacity,
                    fc='white',
                    ec='none'
                )
                ax.add_patch(main_ellipse)
                cloud_artists.append(main_ellipse)
                
                # Add smaller puffs around the main cloud body
                num_puffs = 6
                for i in range(num_puffs):
                    angle = cloud.rotation + (i / num_puffs) * 2 * math.pi
                    dist = min(cloud.width, cloud.height) * 0.4
                    puff_x = cx + math.cos(angle) * dist
                    puff_y = cy + math.sin(angle) * dist
                    puff_size = min(cloud.width, cloud.height) * 0.5 * cloud.puff_variation[i % len(cloud.puff_variation)]
                    
                    puff = Ellipse(
                        (puff_x, puff_y),
                        puff_size, puff_size,
                        alpha=cloud.opacity,
                        fc='white',
                        ec='none'
                    )
                    ax.add_patch(puff)
                    cloud_artists.append(puff)
                
                # Add some detail puffs
                for i in range(3):
                    angle = cloud.rotation + ((i + 0.5) / 3) * 2 * math.pi
                    dist = min(cloud.width, cloud.height) * 0.6
                    puff_x = cx + math.cos(angle) * dist
                    puff_y = cy + math.sin(angle) * dist
                    puff_size = min(cloud.width, cloud.height) * 0.3 * cloud.puff_variation[i % len(cloud.puff_variation)]
                    
                    puff = Ellipse(
                        (puff_x, puff_y),
                        puff_size, puff_size,
                        alpha=cloud.opacity * 0.9,
                        fc='white',
                        ec='none'
                    )
                    ax.add_patch(puff)
                    cloud_artists.append(puff)
        
        weather = weather_system.get_current_weather(frame_idx)
        hour = (frame_idx // FRAMES_PER_HOUR) % 24
        minute = (frame_idx % FRAMES_PER_HOUR) * 5
        time_str = f"{hour:02d}:{minute:02d}"
        
        info_text.set_text(
            f"Total Solar Panels: {len(panels_df)}\n"
            f"Time: {time_str}\n"
            f"Cloud Cover: {weather['cc']:.0f}%\n"
            f"Wind: {weather['ws']:.1f}m/s @ {weather['wd']:.0f}°\n"
            f"Pattern: {weather['pattern']}"
        )
        
        return cloud_artists + [info_text]
    
    ani = FuncAnimation(
        fig, 
        update, 
        frames=TOTAL_FRAMES,
        interval=INTERVAL_MS,
        blit=False,
        repeat=True
    )
    
    plt.show()

def calculate_coverage(panel_pos, clouds, cc_percent):
    coverage = 0.0
    panel_x, panel_y = panel_pos
    
    for cloud in clouds:
        if not cloud.active or cloud.opacity < 0.1:
            continue
            
        cloud_center_x = cloud.x + cloud.width/2
        cloud_center_y = cloud.y + cloud.height/2
        distance_x = abs(panel_x - cloud_center_x)
        distance_y = abs(panel_y - cloud_center_y)
        
        max_dist = max(cloud.width, cloud.height) * 0.6
        distance = math.hypot(distance_x, distance_y)
        coverage += np.clip(1 - distance/max_dist, 0, 1) * cloud.opacity
    
    return np.clip(coverage * (cc_percent/100), 0, 1)

def predict_solar_generation(panels_df, weather_system, frame_idx):
    panels_with_generation = []
    
    weather = weather_system.get_current_weather(frame_idx)
    hour = (frame_idx // FRAMES_PER_HOUR) % 24
    
    base_irradiance = 0
    if 6 <= hour < 18:
        sun_position = math.sin(math.pi * (hour - 6) / 12)
        base_irradiance = 1000 * sun_position
    
    for _, panel in panels_df.iterrows():
        panel_pos = (panel['x'], panel['y'])
        cloud_coverage = calculate_coverage(panel_pos, weather_system.clouds, weather['cc'])
        
        clear_sky_factor = 1.0 - cloud_coverage
        panel_irradiance = base_irradiance * clear_sky_factor
        
        panel_generation = panel_irradiance * 0.2 / 1000  # 20% efficiency, convert W to kW
        panels_with_generation.append({
            'x': panel['x'],
            'y': panel['y'],
            'generation': panel_generation
        })
    
    return panels_with_generation

if __name__ == "__main__":
    panels_csv = r"C:\Users\Suchira_Garusinghe\Desktop\SolarPrediction\xy_coordinates_markers.csv"
    create_cloud_animation(panels_csv)
